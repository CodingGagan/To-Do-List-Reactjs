{"version":3,"sources":["Component/Pages/Contact.js","Component/To-Do-List/LIstItem.js","Component/To-Do-List/ToDoList.js","Component/Layout/Header.js","Component/Body_Content/Dashboard_Content.js","App.js","serviceWorker.js","index.js"],"names":["Component","library","add","faTrash","ListItem","props","listItems","items","map","item","className","key","text","icon","onClick","deleteItem","ToDoList","state","currentItems","handleInput","bind","additems","e","this","setState","target","value","Date","now","preventDefault","newItem","console","log","refs","taskInput","filteredItem","filter","method","onSubmit","class","ref","type","placeholder","onChange","Header","to","exact","path","App","Fragment","style","position","width","height","zIndex","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mXAEsBA,Y,mDCItBC,EAAQC,IAAIC,KAwBGC,MAtBf,SAAkBC,GACd,IAEMC,EAFQD,EAAME,MAEIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACKF,EAAKG,KACN,8BACI,kBAAC,IAAD,CACIF,UAAU,YACVG,KAAK,QACLC,QAAS,WAAQT,EAAMU,WAAWN,EAAKE,cAM3D,OACI,6BAAML,IC0ECU,G,wDA9FX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IAEDY,MAAQ,CACTV,MAAO,GACPW,aAAc,CACVN,KAAM,GACND,IAAK,KAKb,EAAKQ,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKL,WAAa,EAAKA,WAAWK,KAAhB,gBAdH,E,wDAkBPE,GACRC,KAAKC,SAAS,CACVN,aAAc,CACVN,KAAMU,EAAEG,OAAOC,MACff,IAAKgB,KAAKC,W,+BAMbN,GACLA,EAAEO,iBACF,IAAMC,EAAUP,KAAKN,MAAMC,aAG3B,GADAa,QAAQC,IAAIT,KAAKN,MAAMV,OACF,KAAjBuB,EAAQlB,KAAa,CACrB,IAAML,EAAK,sBAAOgB,KAAKN,MAAMV,OAAlB,CAAyBuB,IACpCP,KAAKC,SAAS,CACVjB,MAAOA,EACPW,aAAc,CACVN,KAAM,GACND,IAAK,MAGbY,KAAKU,KAAKC,UAAUR,MAAQ,M,iCAwBzBf,GACP,IAAMwB,EAAeZ,KAAKN,MAAMV,MAAM6B,QAAO,SAAA3B,GAAI,OAAIA,EAAKE,MAAQA,KAClEY,KAAKC,SAAS,CACVjB,MAAO4B,M,+BAKX,OACI,yBAAKzB,UAAU,YACX,wBAAIA,UAAU,0BAAd,sBACA,0BAAM2B,OAAO,OAAOC,SAAUf,KAAKF,UAE/B,yBAAKkB,MAAM,eACP,2BAAOC,IAAI,YAAYC,KAAK,OAAOC,YAAY,kBAAkBC,SAAUpB,KAAKJ,cAChF,yBAAKoB,MAAM,sBACP,4BAAQ7B,UAAU,6BAAlB,QAEJ,4BAAQA,UAAU,8BAAlB,SAIR,kBAAC,EAAD,CAAUH,MAAOgB,KAAKN,MAAMV,MAAOQ,WAAYQ,KAAKR,kB,GAzF7Cf,c,iBC8ER4C,G,MC7EiB5C,YDUnB,WACT,OAkBI,kBAAC,IAAD,KACI,6BAKI,yBAAKU,UAAU,mCACX,wBAAIA,UAAU,cAIV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWmC,GAAG,KAA9B,iBAWZ,kBAAC,IAAD,CAAQnC,UAAU,UAEd,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,KAAlB,IAAuB,kBAAC,EAAD,MAAvB,U,sBE7BLC,E,uKAnBX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CACEC,MAAO,CACLC,SAAU,WACVC,MAAO,OACPC,OAAQ,OACRC,QAAS,KAGb,kBAAC,EAAD,W,GAdUC,IAAMvD,WCIJwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.840e2597.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Contact extends Component {\r\n    render() { \r\n        return (\r\n            <React.Fragment>\r\n                <h1>Hi i'm Contact Page</h1>\r\n            </React.Fragment>\r\n          );\r\n    }\r\n}\r\n \r\nexport default Contact;","import React from 'react';\r\nimport './ListItem.css';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nlibrary.add(faTrash);\r\n\r\nfunction ListItem(props) {\r\n    const items = props.items;\r\n\r\n    const listItems = items.map(item => {\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>\r\n                {item.text}\r\n                <span>\r\n                    <FontAwesomeIcon\r\n                        className=\"flaticons\"\r\n                        icon=\"trash\"\r\n                        onClick={() => { props.deleteItem(item.key) }}\r\n                    />\r\n                </span>\r\n            </p>\r\n        </div>\r\n    })\r\n    return (\r\n        <div>{listItems}</div>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import React, { Component } from 'react';\r\nimport './ToDoList.css';\r\nimport ListItem from './LIstItem';\r\n\r\nimport Swal from 'sweetalert2';\r\nclass ToDoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //   Setting intial state of this app\r\n        this.state = {\r\n            items: [],\r\n            currentItems: {\r\n                text: '',\r\n                key: ''\r\n            }\r\n        }\r\n\r\n        // bind every function with constructor\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.additems = this.additems.bind(this);\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n    }\r\n\r\n    // on change of input tag\r\n    handleInput(e) {\r\n        this.setState({\r\n            currentItems: {\r\n                text: e.target.value,\r\n                key: Date.now()\r\n            }\r\n        })\r\n    }\r\n\r\n    // final submission of add button\r\n    additems(e) {\r\n        e.preventDefault();\r\n        const newItem = this.state.currentItems;\r\n\r\n        console.log(this.state.items);\r\n        if (newItem.text !== '') {\r\n            const items = [...this.state.items, newItem];\r\n            this.setState({\r\n                items: items,\r\n                currentItems: {\r\n                    text: '',\r\n                    key: ''\r\n                }\r\n            })\r\n            this.refs.taskInput.value = '';\r\n            // fetch('http://127.0.0.1:8000/api/to-do-list', {\r\n            //     method: 'post',\r\n            //     body: JSON.stringify(\r\n            //         this.state.currentItems\r\n            //     ),\r\n            //     headers: {\r\n            //         'Accept': 'application/json',\r\n            //         'Content-Type': 'application/json'\r\n            //     }\r\n            // }).then(function (response) {\r\n            //     response.json().then(function (res) {\r\n            //         // console.log('return response '+res);\r\n            //         if (res === 1) {\r\n            //             Swal.fire('Inserted');\r\n\r\n            //         } else {\r\n            //             Swal.fire('Already in Array');\r\n            //         }\r\n            //     })\r\n            // })\r\n        }\r\n    }\r\n\r\n    deleteItem(key) {\r\n        const filteredItem = this.state.items.filter(item => item.key !== key);\r\n        this.setState({\r\n            items: filteredItem\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todolist\">\r\n                <h2 className=\"text-center text-light\">Add Your Task Here</h2>\r\n                <form method=\"post\" onSubmit={this.additems}>\r\n\r\n                    <div class=\"input-group\">\r\n                        <input ref=\"taskInput\" type=\"text\" placeholder=\"Enter Your Task\" onChange={this.handleInput} />\r\n                        <div class=\"input-group-append\">\r\n                            <button className=\"btn btn-info first_button\">Add</button>\r\n                        </div>\r\n                        <button className=\"btn btn-info second_button\">Add</button>\r\n\r\n                    </div>\r\n                </form>\r\n                <ListItem items={this.state.items} deleteItem={this.deleteItem} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ToDoList;","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch\r\n} from \"react-router-dom\";\r\n// import { Navbar, Nav } from 'react-bootstrap';\r\nimport './Header.css';\r\nimport About from '../Pages/About';\r\nimport Contact from '../Pages/Contact';\r\nimport ToDoList from '../To-Do-List/ToDoList';\r\nimport Dashboard from '../Body_Content/Dashboard_Content';\r\n\r\n// JSX\r\nvar Header = () => {\r\n    return (\r\n        // <div className=\"row\">\r\n        //     <div className=\"col-md-12\">\r\n        //         <nav className=\"nav bg-dark\">\r\n        //             <ul className=\"nav navbar\">\r\n        //                 {\r\n        //                     ['Home', 'Company', 'About us', 'Contact'].map((menu) => \r\n        //                         (\r\n        //                             <li className=\"nav-item\">\r\n        //                                 <a href={\"Home.js\"} className=\"nav-link\">{menu}</a>\r\n        //                             </li>\r\n        //                         )\r\n        //                     )\r\n        //                 }\r\n        //             </ul>\r\n        //         </nav>\r\n        //     </div>\r\n        // </div>\r\n        <Router>\r\n            <div>\r\n                {/* <OldSchoolMenuLink activeOnlyWhenExact={true} to=\"/\" label=\"Dashboard\" />\r\n                <OldSchoolMenuLink to=\"/contact\" label=\"Contact\" />\r\n                <OldSchoolMenuLink to=\"/about\" label=\"About\" /> */}\r\n\r\n                <nav className=\"navbar navbar-expand-lg bg-dark\">\r\n                    <ul className=\"navbar-nav\">\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/\">Dashboard </Link>\r\n                        </li> */}\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/\">To Do List</Link>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/contact\">Contact</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">About</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                </nav>\r\n\r\n                <Switch className=\"navbar\">\r\n                    {/* <Route path=\"/\"> <Dashboard /> </Route> */}\r\n                    <Route exact path=\"/\"> <ToDoList /> </Route>\r\n                    {/* <Route path=\"/contact\"> <Contact /> </Route>\r\n                    <Route path=\"/about\"> <About /> </Route> */}\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\n// function OldSchoolMenuLink({ label, to, activeOnlyWhenExact }) {\r\n//     let match = useRouteMatch({\r\n//         path: to,\r\n//         exact: activeOnlyWhenExact\r\n//     });\r\n\r\n//     return (\r\n//         <div className={match ? \"active\" : \"\"}>\r\n//             {match && \"> \"}\r\n//             <Link to={to}>{label}</Link>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport './Dashboard_Content.css';\r\n// Class Component\r\n\r\n// functional component \r\nclass Dashboard_Content extends Component {\r\n\r\n    state = {\r\n        card_body: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        Axios.get('https://jsonplaceholder.typicode.com/posts')\r\n            .then(response => {\r\n                this.setState({ card_body: response.data });\r\n            });\r\n    }\r\n\r\n    // function() {\r\n    //     this.card_body.map(res =>\r\n    //         console.log(res.title)\r\n    //     );\r\n    // }\r\n\r\n    // card_body = [\r\n    //     {\r\n    //         id: 1,\r\n    //         'image': 'm2',\r\n    //         'body': 'Card First Image with Some Content'\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         'image': 'm3',\r\n    //         'body': 'Card Second Image with Some Content'\r\n    //     },\r\n    //     {\r\n    //         id: 3,\r\n    //         'image': 'm4',\r\n    //         'body': 'Card Third Image with Some Content'\r\n    //     },\r\n    //     {\r\n    //         id: 5,\r\n    //         'image': 'm5',\r\n    //         'body': 'My body is my body non of ur body'\r\n    //     }\r\n    // ];\r\n\r\n    render() {\r\n        const cards = this.state.card_body.map(card_card => {\r\n            return <div className=\"col-md-3 m-5\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        {/* <img src={`/image/${card.image}.jpg`} alt={card.image} className=\"card-img-top\" /> */}\r\n                        <p className=\"card-text text-left\">   \r\n                            <h4 className=\"mb-1\">{card_card.title}</h4>\r\n                            <p>{card_card.body}</p>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        })\r\n        return (\r\n            <div className=\"container-fluid\" >\r\n                <div className=\"row mx-0\">\r\n                    {cards}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Dashboard_Content;","import React, { Component } from 'react';\nimport Header from './Component/Layout/Header'\n// import About from './Component/Pages/About';\n// import Contact from './Component/Pages/Contact';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport StarfieldAnimation from 'react-starfield-animation'\n// import Axios from 'axios';\nclass App extends React.Component {\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <StarfieldAnimation\n          style={{\n            position: 'absolute',\n            width: '100%',\n            height: '100%',\n            zIndex: -1\n          }}\n        />\n        <Header />\n      </React.Fragment>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}